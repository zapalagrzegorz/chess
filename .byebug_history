c
   108:     }c
   107:       memo + piece.valid_moves.length
player_pieces.reduce(0) { |memo, piece|
in_check?(color)
player_moves
n
color
s
@current_player.color
c
color
in_check?(color)
n
s
@board.checkmate?(@current_player.color)
c
disable breakpoints
disable
undisplay
skip
c
skip
@current_player.color
n
@current_player == :player1 ? @players[:player2] : @players[:player1]
c
exit
 @current_player == :player1 ? @players[:player2] : @players[:player1]
@current_player = @current_player == :player1 ? @players[:player2] : @players[:player1]
c
exit
 self[start_pos].color == current_color
skip
exit
@board[move].valid_moves
move
n
c
n
c
selected_tiles.length
selected_tiles
n
selected_tiles
exit
skip
c
n
c
n
s
key
n
s
n
exit
move
n
@board[@cursor.cursor_pos].valid_moves
@board[@cursor.cursor_pos]
@cursor.cursor_pos
c
board[[6,6]].moves
board[[6,6]]
board
self
valid_moves
n
s
n
s
c
display end_pos
c
n
c
self[start_pos]
start_pos
display end_pos
c
n
end_pos
exit
piece.valid_moves.length
piece.valid_moves.sum
piece.valid_moves
piece
n
display piece
n
c
n
display memo
n
display piece
c
n
undisplay 1
undisplay piece
display piece
display piec
piece
n
piece.valid_moves.sum
piece.valid_moves
piece
memo
player_pieces
s
list=
player_pieces
c
cc
c
duped_board.rows[0]
row
row.object_id
duped_board.rows.object_id
c
display row_idx
row_idx
c
row_idx
c
row_idx
c
row_idx
c
n
list=
duped_board.rows[0] = row.dup
duped_board.rows[0]
duped_board.rows
row.dup
s
n
end_pos
position
n
s
c
exit
duped_board.rows[0]
duped_board.rows
duped_board[[0]]
duped_board[0]
duped_board[row_idx]
row_idx
s
list=
duped_board
n
s
c
exit
n
s
move
c
s
n
s
exit
c
val
c
exit
@board[@cursor.cursor_pos].moves
@board[@cursor.cursor_pos].valid_moves
p @board[@cursor.cursor_pos].valid_moves
p @board[@cursor.cursor_pos]
c
n
s
n
s
n
s
n
s
c
n
exit
n
s
c
n
c
exit
board.empty?(pos)
pos
n
moves
s
c
n
list=
moves
n
rows[row][col]
n
c
n
nn
n
board.empty?(pos)
pos
n
s
n
list=
rows[row][col]
rows[0][0]
rows[0]
@rows
col
row
n
pos
c
s
n
exit
self[pos].empty?
self[pos]
s
empty?(start_pos)
c
forward_tile
n
forward
n
forward_dir
pawn_column
pawn_row
n
s
c
n
c
moves
n
list=
coords_on_board
list 15
list 10
list -10
list
n
possible_coords
n
c
disable breakpoints
disable
disable all
