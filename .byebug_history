c
n
exit
n
s
c
n
c
exit
board.empty?(pos)
pos
n
moves
s
c
n
list=
moves
n
rows[row][col]
n
c
n
nn
n
board.empty?(pos)
pos
n
s
n
list=
rows[row][col]
rows[0][0]
rows[0]
@rows
col
row
n
pos
c
s
n
exit
self[pos].empty?
self[pos]
s
empty?(start_pos)
c
forward_tile
n
forward
n
forward_dir
pawn_column
pawn_row
n
s
c
n
c
moves
n
list=
coords_on_board
list 15
list 10
list -10
list
n
possible_coords
n
c
disable breakpoints
disable
disable all
c
disable
c
display dx
n
dx
row_idx
c
break 11
c
n
s
c
n
s
c
possible_coords
n
c
moves
n
moves
n
c
n
moves
n
c
n
exit
at_start_row?
n
double_forward_tile
n
double_forward
n
s
c
moves
n
c
moves
n
c
n
moves
n
c
n
exit
forward
n
pawn_column
pawn_row
n
s
c
n
c
exit
board[pos]
pos
n
pos
n
self.color
!board[pos].nil?
board[pos].nil?
board[pos]
pos
s
coords_on_board
n
c
n
coords_on_board
n
possible_coords
n
column_idx
row_idx
n
c
n
c
n
exit
column_idx
row_idx
n
column_idx
row_idx
n
column_idx
row_idx
n
moves
n
s
self.board[[row_idx, column_idx]].nil?
column_idx
row_idx
s
column_idx+1
row_idx-1
s
column_idx
row_idx
c
n
exit
c
n
c
exit
moves
n
moves
n
moves
n
moves
n
column_idx
col_idx
row_idx
n
moves
n
true if board[[row_idx, column_idx]] == nil && row_idx <= 7
board[[5,4]]
column_idx
row_idx
s
row_idx
moves
s
column_idx
row_idx
exit
row_idx
c
exit
s
n
s
c
n
s
c
exit
n
column_idx
row_idx
s
column_idx
row_idx
moves
s
moves
column_idx
row_idx
n
column_idx
row_idx
n
row_idx
n
row_idx
column_idx
n
column_idx
row_idx
c
exit
s
n
row_idx
n
row_idx
exit
