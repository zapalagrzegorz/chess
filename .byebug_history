skip
exit
piece.moves.include?([7,4])
king_pos
piece
c
piece
c
piece
c
piece
c
piece
c
piece
c
piece
c
piece
c
piece
c
piece
c
piece
c
piece
c
piece
c
piece
c
break 169
king_pos
opposing_pieces.any? { |piece| piece.moves.include?(king_pos)}
king_pos
s
list=
opposing_pieces
n
opposing_color
n
king_pos
n
s
n
self
n
b
n
color
s
@color
n
board_dup[[4,7]]
board_dup[[7,4]]
n
exit
[2,2] == [2,2]
end_pos
skip
c
board_dup
n
exit
ext
board_dup
n
s
exit
s
moves
valid_moves
c
moves
c
n
moves
n
s
@board[@cursor.cursor_pos].valid_moves
n
s
valid_moves(selected_tiles)
valid_moves()
@cursor.cursor_pos[1]
@cursor.cursor_pos[0]
s
selected_tiles
c
print_options
n
list=
@cursor.cursor_pos[1]
@cursor.cursor_pos[0]
valid_moves(selected_tiles)
s
selected_tiles
c
n
selected_tiles
n
move
n
exit
moves
c
@cursor.cursor_pos
selected_tiles
skip
c
list=
c
WTF?
wtf
self
pieces
pieces.find { |tile| tile.instance_of?(King) && tile.color == color }
color
king_pos
c
king_pos
exit
  pieces.find { |tile| tile.instance_of?(King) && tile.color == color }
    end
      tile.instance_of?(King) && tile.color == color
pieces.any? do |tile|
color
pieces
@current_player == @players[:player1]
@current_player
@current_player == :player1
@current_player
c
skip
@current_player.color
n
@current_player == :player1 ? @players[:player2] : @players[:player1]
c
exit
 @current_player == :player1 ? @players[:player2] : @players[:player1]
@current_player = @current_player == :player1 ? @players[:player2] : @players[:player1]
c
exit
 self[start_pos].color == current_color
skip
exit
@board[move].valid_moves
move
n
c
n
c
selected_tiles.length
selected_tiles
n
selected_tiles
exit
skip
c
n
c
n
s
key
n
s
n
exit
move
n
@board[@cursor.cursor_pos].valid_moves
@board[@cursor.cursor_pos]
@cursor.cursor_pos
c
board[[6,6]].moves
board[[6,6]]
board
self
valid_moves
n
s
n
s
c
display end_pos
c
n
c
self[start_pos]
start_pos
display end_pos
c
n
end_pos
exit
piece.valid_moves.length
piece.valid_moves.sum
piece.valid_moves
piece
n
display piece
n
c
n
display memo
n
display piece
c
n
undisplay 1
undisplay piece
display piece
display piec
piece
n
piece.valid_moves.sum
piece.valid_moves
piece
memo
player_pieces
s
list=
player_pieces
c
cc
c
duped_board.rows[0]
row
row.object_id
duped_board.rows.object_id
c
display row_idx
row_idx
c
row_idx
c
row_idx
c
row_idx
c
n
list=
duped_board.rows[0] = row.dup
duped_board.rows[0]
duped_board.rows
row.dup
s
n
end_pos
position
n
s
c
exit
duped_board.rows[0]
